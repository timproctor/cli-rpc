exit
minimum_store.size == 1.to_i
minimum_store.size == "1"
minimum_store.size == 1
minimum_store.size
minium_store[2]
minimum_store
arrayed_store
exit
input
exit
input
STORAGE
file
STORAGE.first
STORAGE
exit
file
file.read
exit
file.read
file
exit
file
STORAGE
file.read
file
file.read_line
exit
exigt
STORAGE.drop!(3)
STORAGE
STORAGE.drop(3)
STORAGE.size
STORAGE
exit
STORAGE
exit
STORAGE
exit
STORAGE
exit
STORAGE
exit
STORAGE
exit
STORAGE
exit
STORAGE
exit
STORAGE
exit
alphabet.any?{|letter| @input.include?(letter)}
alphabet = ('a'..'z').to_a
alphabet.any?{|letter| @input.include?(letter)}
exit
alphabet.any?{|letter| @input.include?(letter)}
alphabet.map{|letter| @input.include?letter}
alphabet.each{|letter| @input.include?letter}
alphabet.each do |letter|
@input.include?(alphabet)
@input
alphabet.include?(@input.chars)
@input.chars
in_to_ar = @input.to_a
@input
alphabet.include?(@input)
alphabet = ('a'..'z').to_a
aphabet = ('a'..
exit
alphabet.include?(@input)
alphabet = ('a'..'z').to_a
alphabet = ('a-z').to_a
@input
exit
rpn
exit
@input.class == String
@input == String
@input == nil
@input == true
@input
exit
exi
clean
@input
exit
CLI::OFF
inquire.class
inquire = CLI::ON
exit
File.close("session_data")
file
exit
input
exit
input
exit
@input.class
@input
exit
File.open(path, File::CREAT | File::RDWR, 0644)
path = File.absolute_path("~db/")
file.path
file.stat
file.birthtime
file.path
file.class
file.methods
file.absolute_path("~db/")
file
file = File.new("newfile", File::CREAT | File::RDWR, 0644)
File.new("newfile", File::CREAT | File::RDWR, 0644)
File.new("newfile", File::RDWR, 0644)
inputs.class
exit
test = RpcIO.new
exit
new_rpc
exit
IO.read('Users/timproctor/Documents/Projects/cli-rpc/db/rpc_stack.rb')
IO.read(
exit
IO.console
IO.new($stdin, $stdout)
IO.new
IO.pipe.class
IO.class
IO.pipe
exit
